#pragma once

#include "pch.h"

#define TECHNIQUES_BUFFER_SIZE 100

#define TECHNIQUE_STEP_VIRTUAL_ALLOC_EX          0b00000001
#define TECHNIQUE_STEP_VIRTUAL_PROTECT_EX        0b00000010
#define TECHNIQUE_STEP_WRITE_PROCESS_MEMORY      0b00000011
#define TECHNIQUE_STEP_CREATE_PROCESS_A          0b00000100
#define TECHNIQUE_STEP_CREATE_PROCESS_W          0b00000101
#define TECHNIQUE_STEP_RESUME_THREAD_EX          0b00000110
#define TECHNIQUE_STEP_CREATE_REMOTE_THREAD      0b00000111
#define TECHNIQUE_STEP_GET_THREAD_CONTEXT        0b00001000
#define TECHNIQUE_STEP_SET_THREAD_CONTEXT        0b00001001
#define TECHNIQUE_STEP_GET_PROC_ADDRESS          0b00001010
#define TECHNIQUE_STEP_ENCRYPTION                0b00001011
#define TECHNIQUE_STEP_EDR_EVADING_CREATE_FILE   0b00001100
#define TECHNIQUE_STEP_EDR_EVADING_FILE_MAP      0b00001101
#define TECHNIQUE_STEP_EDR_EVADING_MAP_VIEW      0b00001110

#define SET_TECHNIQUE_FLAG(TechniquePerforming, Flag) ((TechniquePerforming) |= (Flag))

typedef struct {
	UCHAR ucTechniquesFlags;
	union {
		DWORD dwCurrentProtection;
		DWORD dwCounter;
	};
	union {
		LPVOID lpAddressTarget;
		HANDLE hTarget;
	};
} TECHNIQUEPERFORMING;

static TECHNIQUEPERFORMING* Techniques[TECHNIQUES_BUFFER_SIZE];